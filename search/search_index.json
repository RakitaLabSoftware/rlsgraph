{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The motivation behind creating this library is to provide a flexible and scalable way to manage Directed Acyclic Graphs (DAGs) in Python. DAGs are widely used in scientific and machine learning workflows for tasks such as data cleaning, feature engineering, model training, and inference.</p> <p>However, managing a complex DAG can quickly become a daunting task as the number of nodes and their dependencies grow. This library aims to simplify the management of DAGs by providing a high-level API for building, connecting, and running nodes in a DAG. It also provides a configurable storage system that allows users to persist the DAG and its dependencies across multiple runs.</p> <p>Moreover, this library is designed to be flexible and extensible, allowing users to define their own custom nodes and storage systems. It is built on top of asyncio, enabling asynchronous execution of nodes in the DAG, which can significantly speed up the execution of complex DAGs.</p> <p>Overall, this library aims to provide a robust and scalable solution for managing DAGs in Python, making it easier for scientists and machine learning engineers to build and manage complex workflows.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Easy to run and configure</li> <li>\u0421onfigs are self explanatory and you don't need anything except one .yaml file.</li> <li>SciDAG is distributed with minimal dependencies</li> </ul>"},{"location":"#quick-start-guide","title":"Quick start guide","text":"<p>This guide highlights some of the most crucial features that users can leverage. For a more detailed understanding, please refer to the more comprehensive user guide. Additionally, you cold check out th the SciDAG API reference. By utilizing SciDAG, users can streamline their application development process and build efficient, reliable, and scalable applications. Comprehensive documentation is provided to facilitate the integration of SciDAG into your project, and to ensure that users can fully leverage the features offered by the library.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install scidag\n</code></pre> <p>Additional information about installation could be found here.</p>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#config","title":"Config","text":"<pre><code>info: ''\ndag:\nnode_a:\nname: node_a\ncontent:\n_target_: random.random\n_partial_: true\nvariables: null\nedges:\n- node_b.x\n- node_c.x\nnode_b:\nname: node_b\ncontent:\n_target_: __main__.tan\n_partial_: true\nvariables:\nx:\ntype: None\nvalue: 0.5787140071322371\nedges:\n- node_d.x\nnode_c:\nname: node_c\ncontent:\n_target_: __main__.cos\n_partial_: true\nvariables:\nx:\ntype: None\nvalue: 0.5787140071322371\nedges:\n- node_d.y\nnode_d:\nname: node_d\ncontent:\n_target_: __main__.my_sum\n_partial_: true\nvariables:\nx:\ntype: None\nvalue: 0.6533319952665975\ny:\ntype: None\nvalue: 0.8371667129334884\n</code></pre>"},{"location":"#application","title":"Application","text":"<p><pre><code>import scidag as sd\ncfg = cd.load_config(\"/path/to/config.yaml\")\ndag = sd.DAG.from_config(cfg)\ndag.run()\n</code></pre> For more detailed overview please see user guide.</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright \u00a9 2023 RakitaLabSoftware</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api-reference/graph/dag/","title":"DAG","text":""},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG","title":"<code> scidag.core.graph.dag.DAG            (AGraph)         </code>","text":"<p>Directed Acyclic Graph</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG-methods","title":"Methods","text":""},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.add","title":"<code>add(self, node: ANode) -&gt; None</code>","text":"<p>Add :class:<code>scidag.Node</code> to pool of nodes</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.connect","title":"<code>connect(self, source: str, target: str) -&gt; None</code>","text":"<p>Add edge between two nodes</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.disconnect","title":"<code>disconnect(self, source: str, target: str) -&gt; None</code>","text":"<p>Remove edge between two nodes</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.from_config","title":"<code>from_config(cfg: DagConfig) -&gt; DAG</code>  <code>classmethod</code>","text":"<p>Build :class:<code>Self</code> by provided config</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.get_available_nodes","title":"<code>get_available_nodes(self, node_name: str) -&gt; list[str] | None</code>","text":"<p>Shows available tasks to add after this task</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.get_available_nodes--returns","title":"Returns","text":"<p>list[str] | None     Available tasks after this task</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.get_node","title":"<code>get_node(self, node_name: str) -&gt; ANode</code>","text":"<p>Get :class:<code>scidag.Node</code> by its name</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.remove","title":"<code>remove(self, node: ANode) -&gt; None</code>","text":"<p>Remove :class:<code>scidag.Node</code> from this dag</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.run","title":"<code>run(self) -&gt; None</code>  <code>async</code>","text":"<p>Gets inputs from storage runs function and put outputs to storage</p>"},{"location":"api-reference/graph/dag/#scidag.core.graph.dag.DAG.save","title":"<code>save(self) -&gt; None</code>","text":"<p>Save Current run</p>"},{"location":"api-reference/node/base-node/","title":"BaseNode","text":"Source code in <code>scidag/core/node/base.py</code> <pre><code>class BaseNode(ANode):\ndef __init__(self, name: str, content: AnyCallable) -&gt; None:\nself.name = name\nself.content = content\nself.inputs, self.outputs = build_io(self.content)\n@classmethod\ndef from_config(cls, cfg: NodeConfig) -&gt; Self:\n\"\"\"\n        Builds a new instance of `Self` using the provided configuration.\n        Args:\n            cfg (NodeConfig): The configuration to use to build the node.\n        Returns:\n            Self: A new instance of `Self`.\n        \"\"\"\nname = cfg.name\ncontent: AnyCallable = hz.instantiate(cfg.content)\nreturn cls(name=name, content=content)\ndef to_config(self) -&gt; NodeConfig:\n\"\"\"\n        Converts the current node instance to a configuration.\n        Returns:\n            NodeConfig: The configuration for the current node instance.\n        \"\"\"\nreturn make_node_config(self)\ndef set_storage(self, storage: Storage) -&gt; None:\n\"\"\"\n        Sets the storage for the current node.\n        Args:\n            storage (Storage): The storage to set for the current node.\n        Returns:\n            None\n        \"\"\"\nself.storage = storage\nasync def get_inputs(self):\n\"\"\"\n        Retrieves inputs for the current node from storage.\n        Returns:\n            dict: A dictionary containing the inputs for the current node.\n        \"\"\"\nres = await self.storage.get(self.name)\nif self.inputs is not None:\nfor name in self.inputs.keys():\nself.inputs[name].value = res[name]\nreturn res\n@abc.abstractmethod\nasync def run(self):\n\"\"\"\n        Runs the current node by retrieving inputs from storage, running the\n        node's content, and storing the outputs.\n        \"\"\"\n</code></pre>"},{"location":"api-reference/node/base-node/#scidag.core.node.base.BaseNode.from_config","title":"<code>from_config(cfg: NodeConfig) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Builds a new instance of <code>Self</code> using the provided configuration.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>NodeConfig</code> <p>The configuration to use to build the node.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of <code>Self</code>.</p> Source code in <code>scidag/core/node/base.py</code> <pre><code>@classmethod\ndef from_config(cls, cfg: NodeConfig) -&gt; Self:\n\"\"\"\n    Builds a new instance of `Self` using the provided configuration.\n    Args:\n        cfg (NodeConfig): The configuration to use to build the node.\n    Returns:\n        Self: A new instance of `Self`.\n    \"\"\"\nname = cfg.name\ncontent: AnyCallable = hz.instantiate(cfg.content)\nreturn cls(name=name, content=content)\n</code></pre>"},{"location":"api-reference/node/base-node/#scidag.core.node.base.BaseNode.run","title":"<code>run(self)</code>  <code>async</code>","text":"<p>Runs the current node by retrieving inputs from storage, running the node's content, and storing the outputs.</p> Source code in <code>scidag/core/node/base.py</code> <pre><code>@abc.abstractmethod\nasync def run(self):\n\"\"\"\n    Runs the current node by retrieving inputs from storage, running the\n    node's content, and storing the outputs.\n    \"\"\"\n</code></pre>"},{"location":"api-reference/node/base-node/#scidag.core.node.base.BaseNode.to_config","title":"<code>to_config(self) -&gt; NodeConfig</code>","text":"<p>Converts the current node instance to a configuration.</p> <p>Returns:</p> Type Description <code>NodeConfig</code> <p>The configuration for the current node instance.</p> Source code in <code>scidag/core/node/base.py</code> <pre><code>def to_config(self) -&gt; NodeConfig:\n\"\"\"\n    Converts the current node instance to a configuration.\n    Returns:\n        NodeConfig: The configuration for the current node instance.\n    \"\"\"\nreturn make_node_config(self)\n</code></pre>"},{"location":"api-reference/node/end-node/","title":"EndNode","text":""},{"location":"api-reference/node/end-node/#scidag.core.node.end_node.EndNode","title":"<code> scidag.core.node.end_node.EndNode            (BaseNode)         </code>","text":""},{"location":"api-reference/node/end-node/#scidag.core.node.end_node.EndNode-methods","title":"Methods","text":""},{"location":"api-reference/node/end-node/#scidag.core.node.end_node.EndNode.from_config","title":"<code>from_config(cfg: NodeConfig) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Builds a new instance of <code>Self</code> using the provided configuration.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>NodeConfig</code> <p>The configuration to use to build the node.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of <code>Self</code>.</p>"},{"location":"api-reference/node/end-node/#scidag.core.node.end_node.EndNode.run","title":"<code>run(self)</code>  <code>async</code>","text":"<p>Runs the current node by retrieving inputs from storage, running the node's content, and storing the outputs.</p>"},{"location":"api-reference/node/end-node/#scidag.core.node.end_node.EndNode.to_config","title":"<code>to_config(self) -&gt; NodeConfig</code>","text":"<p>Converts the current node instance to a configuration.</p> <p>Returns:</p> Type Description <code>NodeConfig</code> <p>The configuration for the current node instance.</p>"},{"location":"api-reference/node/node/","title":"Node","text":"<p>Base node Class</p> Source code in <code>scidag/core/node/node.py</code> <pre><code>class Node(BaseNode):\n\"\"\"\n    Base node Class\n    \"\"\"\n@classmethod\ndef from_config(cls, cfg: NodeConfig) -&gt; Self:\nreturn super().from_config(cfg)\ndef to_config(self) -&gt; NodeConfig:\nreturn super().to_config()\nasync def run(self) -&gt; None:\ntry:\ninputs = await self.get_inputs()\noutputs = self.content(**inputs)\nself.storage.store(self.name, outputs)\nexcept Exception:\nprint(f\"failed in self.name\")\nraise\n</code></pre>"},{"location":"api-reference/node/node/#scidag.core.node.node.Node.from_config","title":"<code>from_config(cfg: NodeConfig) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Builds a new instance of <code>Self</code> using the provided configuration.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>NodeConfig</code> <p>The configuration to use to build the node.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of <code>Self</code>.</p> Source code in <code>scidag/core/node/node.py</code> <pre><code>@classmethod\ndef from_config(cls, cfg: NodeConfig) -&gt; Self:\nreturn super().from_config(cfg)\n</code></pre>"},{"location":"api-reference/node/node/#scidag.core.node.node.Node.run","title":"<code>run(self) -&gt; None</code>  <code>async</code>","text":"<p>Runs the current node by retrieving inputs from storage, running the node's content, and storing the outputs.</p> Source code in <code>scidag/core/node/node.py</code> <pre><code>async def run(self) -&gt; None:\ntry:\ninputs = await self.get_inputs()\noutputs = self.content(**inputs)\nself.storage.store(self.name, outputs)\nexcept Exception:\nprint(f\"failed in self.name\")\nraise\n</code></pre>"},{"location":"api-reference/node/node/#scidag.core.node.node.Node.to_config","title":"<code>to_config(self) -&gt; NodeConfig</code>","text":"<p>Converts the current node instance to a configuration.</p> <p>Returns:</p> Type Description <code>NodeConfig</code> <p>The configuration for the current node instance.</p> Source code in <code>scidag/core/node/node.py</code> <pre><code>def to_config(self) -&gt; NodeConfig:\nreturn super().to_config()\n</code></pre>"},{"location":"api-reference/node/start-node/","title":"StartNode","text":"Source code in <code>scidag/core/node/start_node.py</code> <pre><code>class StartNode(BaseNode):\nasync def run(self):\noutputs = self.content()\nassert outputs is not None, f\"{self.name}\"\nself.storage.store(self.name, outputs)\n@classmethod\ndef from_config(cls, cfg: NodeConfig) -&gt; Self:\nreturn super().from_config(cfg)\ndef to_config(self) -&gt; NodeConfig:\nreturn super().to_config()\n</code></pre>"},{"location":"api-reference/node/start-node/#scidag.core.node.start_node.StartNode.from_config","title":"<code>from_config(cfg)</code>  <code>classmethod</code>","text":"<p>Builds a new instance of <code>Self</code> using the provided configuration.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>NodeConfig</code> <p>The configuration to use to build the node.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of <code>Self</code>.</p> Source code in <code>scidag/core/node/start_node.py</code> <pre><code>@classmethod\ndef from_config(cls, cfg: NodeConfig) -&gt; Self:\nreturn super().from_config(cfg)\n</code></pre>"},{"location":"api-reference/node/start-node/#scidag.core.node.start_node.StartNode.run","title":"<code>run(self)</code>  <code>async</code>","text":"<p>Runs the current node by retrieving inputs from storage, running the node's content, and storing the outputs.</p> Source code in <code>scidag/core/node/start_node.py</code> <pre><code>async def run(self):\noutputs = self.content()\nassert outputs is not None, f\"{self.name}\"\nself.storage.store(self.name, outputs)\n</code></pre>"},{"location":"api-reference/node/start-node/#scidag.core.node.start_node.StartNode.to_config","title":"<code>to_config(self)</code>","text":"<p>Converts the current node instance to a configuration.</p> <p>Returns:</p> Type Description <code>NodeConfig</code> <p>The configuration for the current node instance.</p> Source code in <code>scidag/core/node/start_node.py</code> <pre><code>def to_config(self) -&gt; NodeConfig:\nreturn super().to_config()\n</code></pre>"},{"location":"user-guide/","title":"Here Should Be Index All Tutorials/Examples","text":""},{"location":"user-guide/installation/","title":"Installation Guide","text":""},{"location":"user-guide/installation/#using-pip","title":"Using PIP:","text":"<pre><code>pip install scidag\n</code></pre> <p>How to install pip</p>"},{"location":"user-guide/installation/#using-poetry","title":"Using Poetry:","text":"<pre><code>poetry add scidag\n</code></pre> <p>How to install poetry</p>"},{"location":"user-guide/installation/#from-source","title":"From source","text":"<p><pre><code>git clone https://github.com/RakitaLabSoftware/scidag.git scidag\ncd scidag poetry install </code></pre> How to install git ``</p>"},{"location":"user-guide/installation/#for-redis-as-storage","title":"For Redis as Storage","text":"<pre><code>pip install scidag[redis]\n</code></pre> <p>How to install redis</p>"},{"location":"user-guide/examples/math/","title":"Python Math","text":"(function() {   function addWidgetsRenderer() {     var requireJsScript = document.createElement('script');     requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js';      var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]');     var jupyterWidgetsScript = document.createElement('script');     var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';     var widgetState;      // Fallback for older version:     try {       widgetState = mimeElement &amp;&amp; JSON.parse(mimeElement.innerHTML);        if (widgetState &amp;&amp; (widgetState.version_major &lt; 2 || !widgetState.version_major)) {         widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';       }     } catch(e) {}      jupyterWidgetsScript.src = widgetRendererSrc;      document.body.appendChild(requireJsScript);     document.body.appendChild(jupyterWidgetsScript);   }    document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }());  <pre><code>from scidag.core import DAG, StartNode, Node, EndNode\nfrom omegaconf import OmegaConf\ndag = DAG()\n</code></pre> <pre><code># FIXME \nimport random\nimport math\ndef my_sum(x, y) -&gt; float:\nreturn x + y\ndef tan(x) -&gt; float:\nreturn math.tan(x)\ndef cos(x) -&gt; float:\nreturn math.cos(x)\ndef pow(x, base: int = 2) -&gt; float:\nreturn pow(x, base)\n</code></pre> <pre><code>dag.add(StartNode(\"node_a\", random.random))\ndag.add(Node(\"node_b\", tan))\ndag.add(Node(\"node_c\", cos))\ndag.add(EndNode(\"node_d\", my_sum))\n# FIXME\ndag.connect(\"node_a\", \"node_b.x\")\ndag.connect(\"node_a\", \"node_c.x\")\ndag.connect(\"node_b\", \"node_d.x\")\ndag.connect(\"node_c\", \"node_d.y\")\n</code></pre> <pre><code># FIXME \ncfg = dag.to_config()\ndag = DAG.from_config(cfg)\ndag.nb_run()\n</code></pre> <pre><code>dag.storage.show()\n</code></pre> target variable source value 0 node_b x node_a 0.578714 1 node_c x node_a 0.578714 2 node_d x node_b 0.653332 3 node_d y node_c 0.837167 <pre><code>print(OmegaConf.to_yaml(dag.to_config()))\n</code></pre> <pre>\n<code>info: ''\ndag:\n  node_a:\n    name: node_a\n    content:\n      _target_: random.random\n      _partial_: true\n    variables: null\n    edges:\n    - node_b.x\n    - node_c.x\n  node_b:\n    name: node_b\n    content:\n      _target_: __main__.tan\n      _partial_: true\n    variables:\n      x:\n        type: None\n        value: 0.5787140071322371\n    edges:\n    - node_d.x\n  node_c:\n    name: node_c\n    content:\n      _target_: __main__.cos\n      _partial_: true\n    variables:\n      x:\n        type: None\n        value: 0.5787140071322371\n    edges:\n    - node_d.y\n  node_d:\n    name: node_d\n    content:\n      _target_: __main__.my_sum\n      _partial_: true\n    variables:\n      x:\n        type: None\n        value: 0.6533319952665975\n      'y':\n        type: None\n        value: 0.8371667129334884\n    edges: []\n\n</code>\n</pre>"},{"location":"user-guide/examples/math/#imports","title":"Imports","text":""},{"location":"user-guide/examples/math/#creating-some-functions","title":"CREATING SOME FUNCTIONS","text":""},{"location":"user-guide/examples/math/#fixme-write-down-philosophy","title":"FIXME write down philosophy","text":""},{"location":"user-guide/examples/numpy/","title":"Numpy","text":"(function() {   function addWidgetsRenderer() {     var requireJsScript = document.createElement('script');     requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js';      var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]');     var jupyterWidgetsScript = document.createElement('script');     var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';     var widgetState;      // Fallback for older version:     try {       widgetState = mimeElement &amp;&amp; JSON.parse(mimeElement.innerHTML);        if (widgetState &amp;&amp; (widgetState.version_major &lt; 2 || !widgetState.version_major)) {         widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';       }     } catch(e) {}      jupyterWidgetsScript.src = widgetRendererSrc;      document.body.appendChild(requireJsScript);     document.body.appendChild(jupyterWidgetsScript);   }    document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }());  <pre><code>from scidag.core import DAG, StartNode, Node, EndNode\nfrom omegaconf import OmegaConf\ndag = DAG()\n</code></pre> <pre><code>import random\nimport numpy as np\ndef make_data():\nreturn np.asarray([[2,2],[2,2]])\ndef tan(x):\nreturn x*2\ndef cos(x):\nreturn x/2\ndef pow(a, b):\nreturn a+b\n</code></pre> <pre><code>dag.add(StartNode(\"node_a\", make_data))\ndag.add(Node(\"node_b\", tan))\ndag.add(Node(\"node_c\", cos))\ndag.add(EndNode(\"node_d\", pow))\n# FIXME\ndag.connect(\"node_a\", \"node_b.x\")\ndag.connect(\"node_a\", \"node_c.x\")\ndag.connect(\"node_b\", \"node_d.a\")\ndag.connect(\"node_c\", \"node_d.b\")\n</code></pre> <pre><code># FIXME \ncfg = dag.to_config()\ndag = DAG.from_config(cfg)\ndag.nb_run()\n</code></pre> <pre><code>dag.storage.show()\n</code></pre> target variable source value 0 node_b x node_a [[2, 2], [2, 2]] 1 node_c x node_a [[2, 2], [2, 2]] 2 node_d a node_b [[4, 4], [4, 4]] 3 node_d b node_c [[1.0, 1.0], [1.0, 1.0]] <pre><code>print(OmegaConf.to_yaml(dag.to_config()))\n</code></pre> <pre>\n<code>info: ''\ndag:\n  node_a:\n    name: node_a\n    content:\n      _target_: __main__.make_data\n      _partial_: true\n    variables: null\n    edges:\n    - node_b.x\n    - node_c.x\n  node_b:\n    name: node_b\n    content:\n      _target_: __main__.tan\n      _partial_: true\n    variables:\n      x:\n        type: None\n        value:\n        - - 2\n          - 2\n        - - 2\n          - 2\n    edges:\n    - node_d.a\n  node_c:\n    name: node_c\n    content:\n      _target_: __main__.cos\n      _partial_: true\n    variables:\n      x:\n        type: None\n        value:\n        - - 2\n          - 2\n        - - 2\n          - 2\n    edges:\n    - node_d.b\n  node_d:\n    name: node_d\n    content:\n      _target_: __main__.pow\n      _partial_: true\n    variables:\n      a:\n        type: None\n        value:\n        - - 4\n          - 4\n        - - 4\n          - 4\n      b:\n        type: None\n        value:\n        - - 1.0\n          - 1.0\n        - - 1.0\n          - 1.0\n    edges: []\n\n</code>\n</pre>"},{"location":"user-guide/examples/numpy/#imports","title":"Imports","text":""},{"location":"user-guide/examples/numpy/#creating-some-functions","title":"CREATING SOME FUNCTIONS","text":""},{"location":"user-guide/tutorials/create-dag-from-config/","title":"Create From Config","text":""},{"location":"user-guide/tutorials/create-dag-from-config/#specify-configyaml","title":"Specify config.yaml","text":"cfg.yaml<pre><code>info: \"some yaml metadata\"\ndag:\nnode_a:\nname: node_a\ncontent:\n_target_: fn_a\n_partial_: true\nedges:\n- node_b1.a\nnode_b:\nname: node_c\ncontent:\n_target_: fn_b\n_partial_: true\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-config/#load-dag","title":"Load DAG","text":"create_from_config.py<pre><code>import DAG\ncfg = DAG.load_cfg(\"/path/to/cfg.yaml\")\ndag = DAG.from_config(cfg)\ndag.run()\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-config/#output","title":"Output","text":"output<pre><code>foo:bar\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-scratch/","title":"Create From Scratch","text":"<p>Here will be a little text about how to make everything properly</p>"},{"location":"user-guide/tutorials/create-dag-from-scratch/#instantiate-dag","title":"Instantiate DAG","text":"<pre><code># FIXME write down philosophy \nimport math\nfrom scidag import DAG, Node\nimport asyncio\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-scratch/#create-functions-that-will-be-used-as-tasks-in-dag","title":"Create functions that will be used as tasks in DAG","text":"<pre><code>import random\ndef generate_random(start:int=10, finish:int=30)-&gt;int:\nreturn random.randint(start, finish)\ndef fib(n:int)-&gt;int:\nif n == 0:\nreturn 0\nelif n == 1 or n == 2:\nreturn 1\nelse:\nreturn fib(n-1) + fib(n-2)\ndef fib_func(n:int)-&gt;int:\nreturn fib(n) \ndef square_func(a:int)-&gt;int:\nreturn round(math.sqrt(a))\ndef sum_func(a:int, b:int)-&gt;int:\nreturn a + b\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-scratch/#create-dag-and-nodes","title":"Create DAG and Nodes","text":"<pre><code>dag = DAG()\nnode_a  = Node(\"node_a\", generate_random)\nnode_b1 = Node(\"node_b\", fib_func)\nnode_b2 = Node(\"node_c\", square_func)\nnode_c  = Node(\"node_d\", sum_func)\n</code></pre> graph TD A[node_a] --&gt; B[node_b] A --&gt; C[node_c] B --&gt; D[node_d] C --&gt; D"},{"location":"user-guide/tutorials/create-dag-from-scratch/#add-nodes-to-dag","title":"Add nodes to DAG","text":"<pre><code>dag.add(node_a)\ndag.add(node_b1)\ndag.add(node_b2)\ndag.add(node_c)\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-scratch/#connect-nodes","title":"Connect Nodes","text":"<pre><code>dag.connect(\"node_a\", \"node_b1.n\")\ndag.connect(\"node_a\", \"node_b2.a\")\ndag.connect(\"node_b1\", \"node_c.a\")\ndag.connect(\"node_b2\", \"node_c.b\")\n</code></pre>"},{"location":"user-guide/tutorials/create-dag-from-scratch/#run-dag","title":"Run DAG","text":"<pre><code>dag.run()\n</code></pre>"},{"location":"user-guide/tutorials/merging-multimple-dags/","title":"Merging Multiple Dags","text":"<pre><code>import DAG\ncfg_1 = DAG.load_config(cfg_1)\ndag_1 = DAG.from_config(cfg_1)\ncfg_2 = DAG.load_config(cfg_2)\ndag_2 = DAG.from_config(cfg_2)\ndag1.extend(dag_2, \"node_a\", \"node_b\")\n</code></pre>"}]}